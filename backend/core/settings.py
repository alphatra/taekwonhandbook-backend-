"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-b0s14x529+%&57ta(sof(m(@$&wo9d$lyoh4h3-5!)gwyaz)lq"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DJANGO_DEBUG", "1") in ("1", "true", "True")

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",") if os.getenv("DJANGO_ALLOWED_HOSTS") else ["localhost", "127.0.0.1", "testserver"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 3rd-party
    "rest_framework",
    "drf_spectacular",
    "corsheaders",
    "csp",
    "django_json_widget",
    "django_filters",
    "channels",
    # local apps
    "tkh_lexicon",
    "tkh_patterns",
    "tkh_progress",
    "tkh_media",
    "tkh_search",
    "tkh_quizzes",
    "tkh_exams",
    "tkh_billing",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "csp.middleware.CSPMiddleware",
    "django.middleware.http.ConditionalGetMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "core.middleware.RequestLogMiddleware",
    "core.middleware.DisallowScrapingMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"
ASGI_APPLICATION = "core.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.getenv("DB_NAME", BASE_DIR / "db.sqlite3"),
        "USER": os.getenv("DB_USER", ""),
        "PASSWORD": os.getenv("DB_PASSWORD", ""),
        "HOST": os.getenv("DB_HOST", ""),
        "PORT": os.getenv("DB_PORT", ""),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")
USE_ETAGS = True

# DRF
# Throttle defaults differ for DEV vs PROD (can be overridden via ENV)
if DEBUG:
    _THROTTLE_DEFAULTS = {
        "anon": "200/min",
        "user": "2000/min",
        "media": "30/min",
        "search": "90/min",
        "quizzes": "90/min",
        "progress": "180/min",
        "billing": "90/min",
        "ads": "90/min",
    }
else:
    _THROTTLE_DEFAULTS = {
        "anon": "60/min",
        "user": "600/min",
        "media": "10/min",
        "search": "30/min",
        "quizzes": "30/min",
        "progress": "60/min",
        "billing": "30/min",
        "ads": "30/min",
    }
REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.OrderingFilter",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": int(os.getenv("DRF_PAGE_SIZE", "20")),
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
        "rest_framework.throttling.ScopedRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": os.getenv("DRF_THROTTLE_ANON", _THROTTLE_DEFAULTS["anon"]),
        "user": os.getenv("DRF_THROTTLE_USER", _THROTTLE_DEFAULTS["user"]),
        "media": os.getenv("DRF_THROTTLE_MEDIA", _THROTTLE_DEFAULTS["media"]),
        "search": os.getenv("DRF_THROTTLE_SEARCH", _THROTTLE_DEFAULTS["search"]),
        "quizzes": os.getenv("DRF_THROTTLE_QUIZZES", _THROTTLE_DEFAULTS["quizzes"]),
        "progress": os.getenv("DRF_THROTTLE_PROGRESS", _THROTTLE_DEFAULTS["progress"]),
        "billing": os.getenv("DRF_THROTTLE_BILLING", _THROTTLE_DEFAULTS["billing"]),
        "ads": os.getenv("DRF_THROTTLE_ADS", _THROTTLE_DEFAULTS["ads"]),
    },
    "EXCEPTION_HANDLER": "core.exceptions.custom_exception_handler",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "ITF Taekwon-Do Handbook API",
    "DESCRIPTION": "REST API for mobile/web clients",
    "VERSION": "1.0.0",
}

# CORS
CORS_ALLOW_ALL_ORIGINS = DEBUG
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:5173",
]
CORS_ALLOW_HEADERS = ["*"]
CORS_ALLOW_CREDENTIALS = True

# S3/MinIO
S3_ENDPOINT_URL = os.getenv("S3_ENDPOINT_URL", "http://localhost:9000")
S3_BUCKET = os.getenv("S3_BUCKET", "taekwonhandbook")
S3_ACCESS_KEY = os.getenv("S3_ACCESS_KEY", "minioadmin")
S3_SECRET_KEY = os.getenv("S3_SECRET_KEY", "minioadmin")

# Meilisearch
MEILISEARCH_URL = os.getenv("MEILISEARCH_URL", "http://localhost:7700")
MEILISEARCH_API_KEY = os.getenv("MEILISEARCH_API_KEY", "")

# Security (prod)
if not DEBUG:
    SECURE_SSL_REDIRECT = os.getenv("SECURE_SSL_REDIRECT", "1") in ("1", "true", "True")
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = int(os.getenv("SECURE_HSTS_SECONDS", "3600"))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    CSRF_TRUSTED_ORIGINS = os.getenv("CSRF_TRUSTED_ORIGINS", "").split(",") if os.getenv("CSRF_TRUSTED_ORIGINS") else []
    # CSP
    CSP_DEFAULT_SRC = ("'self'",)
    CSP_IMG_SRC = ("'self'", "data:", "blob:")
    CSP_MEDIA_SRC = ("'self'", "data:", "blob:", os.getenv("CDN_ORIGIN", ""))
    # Allow inline only when explicitly enabled via env
    CSP_SCRIPT_SRC = ("'self'",) + (("'unsafe-inline'",) if os.getenv("CSP_UNSAFE_INLINE") else tuple())
    CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")
    CSP_OBJECT_SRC = ("'none'",)
    CSP_FRAME_ANCESTORS = ("'none'",)
    # Optional connect-src extras (e.g., Sentry, analytics)
    _connect_extra = tuple(filter(None, (os.getenv("CSP_CONNECT_EXTRA", "").strip(),)))
    CSP_CONNECT_SRC = ("'self'",) + _connect_extra

# Channels (Redis backend via channels-redis)
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [os.getenv("REDIS_URL", "redis://localhost:6379/0")],
        },
    }
}

# Celery
CELERY_BROKER_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_TASK_ALWAYS_EAGER = bool(int(os.getenv("CELERY_TASK_ALWAYS_EAGER", "1" if DEBUG else "0")))
CELERY_TASK_EAGER_PROPAGATES = DEBUG

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "json": {
            "()": "pythonjsonlogger.jsonlogger.JsonFormatter",
            "fmt": "%(asctime)s %(levelname)s %(name)s %(message)s",
        },
        "rich": {
            "()": "rich.logging.RichHandler",
            "rich_tracebacks": True,
            "markup": True,
            "show_path": False,
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "json" if not DEBUG else "rich",
        }
    },
    "loggers": {
        "request": {"handlers": ["console"], "level": os.getenv("REQUEST_LOG_LEVEL", "INFO")},
        "django": {"handlers": ["console"], "level": os.getenv("DJANGO_LOG_LEVEL", "WARNING")},
    },
}
