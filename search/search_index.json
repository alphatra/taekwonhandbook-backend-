{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#architektura","title":"Architektura","text":"<p>Diagram przep\u0142yw\u00f3w jest dost\u0119pny w README lub diagramach projektowych.</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#szybki-start-dev","title":"Szybki start (DEV)","text":"<ol> <li><code>rye pin 3.12 &amp;&amp; rye sync</code></li> <li><code>docker compose up -d postgres redis meilisearch minio</code></li> <li><code>rye run python backend/manage.py migrate</code></li> <li><code>rye run python backend/manage.py runserver</code></li> </ol> <p>API: <code>/api/docs/</code> (Swagger/Redoc)</p>"},{"location":"getting-started/#upload-wideo-przykad-curl","title":"Upload wideo (przyk\u0142ad cURL)","text":"<p>1) Pobierz presigned POST:</p> <pre><code>curl -X POST \"http://localhost:8000/api/v1/media/upload\" \\\n  -H \"Authorization: Bearer &lt;JWT&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"filename\":\"demo.mp4\"}'\n</code></pre> <p>2) Wy\u015blij plik bezpo\u015brednio do S3/MinIO:</p> <pre><code>curl -X POST \"$URL_Z_KROKU_1\" \\\n  -F key=\"$KEY\" \\\n  -F acl=private \\\n  -F AWSAccessKeyId=\"$ACCESS_KEY\" \\\n  -F policy=\"$POLICY\" \\\n  -F signature=\"$SIGNATURE\" \\\n  -F file=@demo.mp4\n</code></pre> <p>3) Finalizacja:</p> <pre><code>curl -X POST \"http://localhost:8000/api/v1/media/complete\" \\\n  -H \"Authorization: Bearer &lt;JWT&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"key\":\"uploads/&lt;uid&gt;/demo.mp4\",\"kind\":\"video\"}'\n</code></pre>"},{"location":"howto-billing/","title":"Billing i Kluby (PL)","text":"<p>Ten przewodnik pokazuje jak: - pobra\u0107 plany (<code>GET /api/v1/billing/plans</code>), - uzyska\u0107 token uprawnie\u0144 (<code>GET /api/v1/billing/entitlements/token</code>), - sprawdzi\u0107 decyzj\u0119 reklam (<code>GET /api/v1/ads/should-show</code>), - utworzy\u0107 klub i zaprosi\u0107 cz\u0142onka.</p>"},{"location":"howto-billing/#jwt","title":"JWT","text":"<p>Uzyskaj token:</p> <pre><code>curl -X POST http://localhost:8000/api/auth/token/ \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"username\":\"member\",\"password\":\"Member123!\"}'\n</code></pre>"},{"location":"howto-billing/#plany","title":"Plany","text":"<pre><code>curl http://localhost:8000/api/v1/billing/plans\n</code></pre>"},{"location":"howto-billing/#token-uprawnien","title":"Token uprawnie\u0144","text":"<p><pre><code>curl -H \"Authorization: Bearer $TOKEN\" \\\n  http://localhost:8000/api/v1/billing/entitlements/token\n</code></pre> Odpowied\u017a zawiera <code>token</code> i <code>ttlSeconds</code>.</p>"},{"location":"howto-billing/#reklamy","title":"Reklamy","text":"<pre><code>curl -H \"Authorization: Bearer $TOKEN\" \\\n  http://localhost:8000/api/v1/ads/should-show\n</code></pre>"},{"location":"howto-billing/#kluby","title":"Kluby","text":"<ul> <li>Utw\u00f3rz klub: <pre><code>curl -X POST -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -d '{\"name\":\"Do jang A\",\"plan\":\"club\",\"seats_total\":5}' \\\n  http://localhost:8000/api/v1/billing/clubs\n</code></pre></li> <li>Zapro\u015b cz\u0142onka: <pre><code>curl -X POST -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -d '{\"user_id\":3}' \\\n  http://localhost:8000/api/v1/billing/clubs/1/invite\n</code></pre></li> <li>Usu\u0144 cz\u0142onka: <pre><code>curl -X DELETE -H \"Authorization: Bearer $TOKEN\" \\\n  http://localhost:8000/api/v1/billing/clubs/1/members/3\n</code></pre></li> </ul>"},{"location":"howto-clubs/","title":"Clubs API (PL)","text":"<p>Endpointy (owner): - GET /api/v1/billing/clubs \u2014 lista klub\u00f3w w\u0142a\u015bciciela - POST /api/v1/billing/clubs \u2014 utw\u00f3rz klub (name, plan, seats_total) - POST /api/v1/billing/clubs/{id}/invite \u2014 zapro\u015b cz\u0142onka (user_id) - DELETE /api/v1/billing/clubs/{id}/members/{user_id} \u2014 usu\u0144 cz\u0142onka (nie owner) - DELETE /api/v1/billing/clubs/{id} \u2014 usu\u0144 klub (gdy pusty)</p> <p>Endpointy (member): - POST /api/v1/billing/clubs/{id}/leave \u2014 opu\u015b\u0107 klub (nie owner)</p> <p>Wymagania: - JWT w nag\u0142\u00f3wku Authorization: Bearer  - Limit miejsc: egzekwowany przez seats_max planu club <p>Zobacz tak\u017ce: howto-billing.pl.md oraz Swagger UI w sekcji API.</p>"},{"location":"howto-clubs/#uprawnienia-rol","title":"Uprawnienia r\u00f3l","text":"Operacja Endpoint owner coach member Lista klub\u00f3w GET /api/v1/billing/clubs \u2713 \u2713 \u2717 Utw\u00f3rz klub POST /api/v1/billing/clubs \u2713 \u2717 \u2717 Lista cz\u0142onk\u00f3w GET /api/v1/billing/clubs/{id}/members \u2713 \u2713 \u2717 Zapro\u015b cz\u0142onka POST /api/v1/billing/clubs/{id}/invite \u2713 \u2713 \u2717 Usu\u0144 cz\u0142onka DELETE /api/v1/billing/clubs/{id}/members/{user_id} \u2713 \u2713 \u2717 Zmie\u0144 rol\u0119 POST /api/v1/billing/clubs/{id}/members/{user_id}/role \u2713 \u2717 \u2717 Usu\u0144 klub (pusty) DELETE /api/v1/billing/clubs/{id} \u2713 \u2717 \u2717 Opu\u015b\u0107 klub POST /api/v1/billing/clubs/{id}/leave \u2717 \u2717 \u2713"},{"location":"howto-deploy.prod/","title":"Deploy (prod) \u2013 Compose","text":""},{"location":"howto-deploy.prod/#env","title":"ENV","text":"<p>Ustaw zmienne: - DJANGO_DEBUG=0 - DJANGO_ALLOWED_HOSTS=your.domain - CSRF_TRUSTED_ORIGINS=https://your.domain - DJANGO_SECRET_KEY= - REDIS_URL=redis://redis:6379/0 - DB_ (je\u015bli zewn\u0119trzny Postgres) - S3_ (endpoint, bucket, keys) - MEILISEARCH_URL=http://meilisearch:7700 - CSP_CONNECT_EXTRA=https://sentry.io (opcjonalnie)"},{"location":"howto-deploy.prod/#uruchomienie","title":"Uruchomienie","text":"<p><pre><code>docker compose -f docker-compose.prod.yml up -d --build\n</code></pre> Sprawd\u017a: - /health/ \u2013 powinno by\u0107 OK dla db/redis/meilisearch - /api/docs \u2013 Swagger</p>"},{"location":"howto-deploy.prod/#logi","title":"Logi","text":"<ul> <li>Nginx/Gunicorn/Django \u2013 JSON z X-Request-ID</li> </ul>"},{"location":"howto-deploy.prod/#aktualizacja","title":"Aktualizacja","text":"<pre><code>docker compose -f docker-compose.prod.yml pull &amp;&amp;   docker compose -f docker-compose.prod.yml up -d &amp;&amp;   docker image prune -f\n</code></pre>"},{"location":"howto-etag/","title":"Howto etag","text":"<p>How\u2011to: ETag (If\u2011None\u2011Match)</p> <p>Lista technik z warunkowym GET:</p> <pre><code># 1) Pierwsze pobranie\ncurl -i \"http://localhost:8000/api/v1/techniques/\" \\\n  -H \"Authorization: Bearer $ACCESS\"\n\n# Sprawd\u017a nag\u0142\u00f3wek ETag w odpowiedzi, np. ETag: \"\\\"abc123\\\"\"\nETAG=\\\"abc123\\\"\n\n# 2) Warunkowe pobranie (brak zmian \u2192 304)\ncurl -i \"http://localhost:8000/api/v1/techniques/\" \\\n  -H \"If-None-Match: $ETAG\" \\\n  -H \"Authorization: Bearer $ACCESS\"\n</code></pre> <p>W kliencie offline-first: zapisuj ETag per zas\u00f3b i u\u017cywaj <code>If-None-Match</code>; przy 304 pozostaw cache bez zmian.</p>"},{"location":"howto-filters/","title":"Howto filters","text":"<p>How\u2011to: Paginacja, sortowanie i filtrowanie</p>"},{"location":"howto-filters/#paginacja-drf-pagenumberpagination","title":"Paginacja (DRF PageNumberPagination)","text":"<pre><code>curl \"http://localhost:8000/api/v1/techniques/?page=2\" \\\n  -H \"Authorization: Bearer $ACCESS\"\n</code></pre>"},{"location":"howto-filters/#sortowanie-orderingfilter","title":"Sortowanie (OrderingFilter)","text":"<pre><code># malej\u0105co po updated_at, potem rosn\u0105co po id\ncurl \"http://localhost:8000/api/v1/techniques/?ordering=-updated_at,id\" \\\n  -H \"Authorization: Bearer $ACCESS\"\n</code></pre>"},{"location":"howto-filters/#filtrowanie-techniques","title":"Filtrowanie \u2014 Techniques","text":"<pre><code># kategoria\ncurl \"http://localhost:8000/api/v1/techniques/?category=hand\" -H \"Authorization: Bearer $ACCESS\"\n\n# minimalny pas\ncurl \"http://localhost:8000/api/v1/techniques/?min_belt=5\" -H \"Authorization: Bearer $ACCESS\"\n\n# czy ma media\ncurl \"http://localhost:8000/api/v1/techniques/?hasMedia=true\" -H \"Authorization: Bearer $ACCESS\"\n</code></pre>"},{"location":"howto-filters/#filtrowanie-tuls","title":"Filtrowanie \u2014 Tuls","text":"<pre><code>curl \"http://localhost:8000/api/v1/tuls/?belt=6\" -H \"Authorization: Bearer $ACCESS\"\n</code></pre>"},{"location":"howto-jwt/","title":"Howto jwt","text":"<p>How\u2011to: JWT (logowanie i od\u015bwie\u017canie)</p> <p>1) Pobierz token (login)</p> <pre><code>curl -X POST \"http://localhost:8000/api/auth/token/\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"admin\",\"password\":\"&lt;has\u0142o&gt;\"}'\n# =&gt; { \"access\": \"...\", \"refresh\": \"...\" }\n</code></pre> <p>2) U\u017cyj tokenu w zapytaniach API</p> <pre><code>ACCESS=&lt;wstaw_access&gt;\ncurl -H \"Authorization: Bearer $ACCESS\" \\\n  \"http://localhost:8000/api/v1/techniques/?page=1\"\n</code></pre> <p>3) Od\u015bwie\u017c token</p> <pre><code>REFRESH=&lt;wstaw_refresh&gt;\ncurl -X POST \"http://localhost:8000/api/auth/token/refresh/\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"refresh\\\":\\\"$REFRESH\\\"}\"\n# =&gt; { \"access\": \"...\" }\n</code></pre> <p>W aplikacji klienckiej: przechowuj tylko <code>access</code> kr\u00f3tkoterminowo; <code>refresh</code> w bezpiecznym magazynie. Po 401 spr\u00f3buj od\u015bwie\u017cenia i powt\u00f3rz \u017c\u0105danie.</p>"},{"location":"howto-media/","title":"Media: upload \u2192 transkodowanie \u2192 listy (PL)","text":""},{"location":"howto-media/#1-presigned-upload-s3minio","title":"1) Presigned upload (S3/MinIO)","text":"<p><pre><code>curl -X POST http://localhost:8000/api/v1/media/upload   -H \"Authorization: Bearer $TOKEN\"   -H 'Content-Type: application/json'   -d '{\"filename\":\"test.mp4\"}'\n</code></pre> Odpowied\u017a zawiera <code>url</code> i <code>fields</code> do formularza POST bezpo\u015brednio do bucketa.</p>"},{"location":"howto-media/#2-zakonczenie-uploadu-i-start-transkodowania","title":"2) Zako\u0144czenie uploadu i start transkodowania","text":"<p>Po udanym POST do bucketa, wywo\u0142aj: <pre><code>curl -X POST http://localhost:8000/api/v1/media/complete   -H \"Authorization: Bearer $TOKEN\"   -d \"key=uploads/1/test.mp4\" -d \"kind=video\"\n</code></pre> W DEV Celery dzia\u0142a eager \u2013 zas\u00f3b dostanie <code>status=ready</code>, <code>codec=h264</code>, <code>duration\u224812.34</code>, <code>resolutions=[360p,480p]</code>, miniatury.</p>"},{"location":"howto-media/#3-lista-i-filtry","title":"3) Lista i filtry","text":"<p>```bash</p>"},{"location":"howto-media/#wszystkie-gotowe-wideo-z-kodekiem-h264","title":"wszystkie gotowe wideo z kodekiem h264","text":"<p>curl \"http://localhost:8000/api/v1/media/assets?status=ready&amp;kind=video&amp;codec=h264\"</p>"},{"location":"howto-media/#zakres-czasu-trwania","title":"zakres czasu trwania","text":"<p>curl \"http://localhost:8000/api/v1/media/assets?duration_min=1&amp;duration_max=30\"</p>"},{"location":"howto-media/#po-rozdzielczosci-json-contains","title":"po rozdzielczo\u015bci (JSON contains)","text":"<p>curl \"http://localhost:8000/api/v1/media/assets?resolution=480p\"</p>"},{"location":"howto-search/","title":"Wyszukiwanie i Reindeksacja (PL)","text":""},{"location":"howto-search/#endpoint-apiv1search","title":"Endpoint <code>/api/v1/search</code>","text":"<ul> <li>Parametry:</li> <li>q: fraza (opcjonalna)</li> <li>type: technique | tul (domy\u015blnie technique)</li> <li>limit: 1\u201350 (domy\u015blnie 20)</li> <li>Dzia\u0142anie: najpierw Meilisearch, w razie braku \u2013 fallback do bazy danych.</li> </ul> <p>Przyk\u0142ad: <pre><code>curl \"http://localhost:8000/api/v1/search?q=Hwa&amp;type=tul&amp;limit=5\"\n</code></pre></p>"},{"location":"howto-search/#reindeksacja-meilisearch","title":"Reindeksacja Meilisearch","text":"<ul> <li>Komenda: <pre><code>rye run python backend/manage.py reindex_search --types techniques,tuls --batch-size 500 --drop\n</code></pre></li> <li>Opcje:</li> <li>--types: techniques,tuls (lista po przecinkach)</li> <li>--batch-size: rozmiar partii (domy\u015blnie 500)</li> <li>--drop: usu\u0144/odtw\u00f3rz indeksy przed wgraniem danych</li> <li>--dry-run: tylko policz rekordy, bez zapisu do Meilisearch</li> </ul> <p>Wymagania: - Zmienne \u015brodowiskowe: MEILISEARCH_URL, opcjonalnie MEILISEARCH_API_KEY</p>"},{"location":"howto-sentry/","title":"Sentry (PL)","text":""},{"location":"howto-sentry/#konfiguracja","title":"Konfiguracja","text":"<p>Ustaw zmienne \u015brodowiskowe: - SENTRY_DSN: adres projektu w Sentry (w\u0142\u0105cza integracj\u0119) - SENTRY_TRACES_SAMPLE_RATE (opcjonalnie, np. 0.1) - SENTRY_PROFILES_SAMPLE_RATE (opcjonalnie)</p> <p>Integracja inicjuje si\u0119 automatycznie w core/init.py (Django + Celery). Dane osobowe nie s\u0105 wysy\u0142ane (send_default_pii=False).</p>"},{"location":"howto-sentry/#korelacja-zdarzen","title":"Korelacja zdarze\u0144","text":"<p>Middleware dodaje do scope: - request_id (tag) \u2013 zgodny z logami Nginx/Gunicorn/Django - duration_ms (extra)</p>"},{"location":"howto-sentry/#weryfikacja","title":"Weryfikacja","text":"<p>Wywo\u0142aj b\u0142\u0105d lokalnie, np. odwiedzaj\u0105c nieistniej\u0105cy URL lub dodaj tymczasowo 1/0 w dowolnym widoku. Zdarzenie pojawi si\u0119 w Sentry z tagiem request_id.</p>"},{"location":"howto-upload/","title":"Howto upload","text":"<p>How\u2011to: Upload wideo (presigned POST)</p> <p>1) Pobierz presigned POST</p> <pre><code>curl -X POST \"http://localhost:8000/api/v1/media/upload\" \\\n  -H \"Authorization: Bearer $ACCESS\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"filename\":\"demo.mp4\"}'\n# =&gt; { url, fields{ key, acl, AWSAccessKeyId, policy, signature } }\n</code></pre> <p>2) Wy\u015blij plik do S3/MinIO (multipart)</p> <pre><code>curl -X POST \"$URL\" \\\n  -F key=\"$KEY\" -F acl=private -F AWSAccessKeyId=\"$AK\" \\\n  -F policy=\"$POLICY\" -F signature=\"$SIG\" \\\n  -F file=@demo.mp4\n</code></pre> <p>3) Finalizacja uploadu</p> <pre><code>curl -X POST \"http://localhost:8000/api/v1/media/complete\" \\\n  -H \"Authorization: Bearer $ACCESS\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"key\":\"uploads/&lt;uid&gt;/demo.mp4\",\"kind\":\"video\"}'\n</code></pre>"},{"location":"","title":"Home","text":"<p>Taekwon\u2011Do Handbook \u2014 Dokumentacja Backend</p> <ul> <li>API: interaktywne OpenAPI (Swagger/Redoc) w menu.</li> <li>Referencje: automatycznie generowane z docstring\u00f3w (mkdocstrings).</li> <li>Diagramy: Mermaid (przep\u0142ywy, sekwencje, architektura).</li> </ul> <p>Wybierz j\u0119zyk (PL/EN) w prawym g\u00f3rnym rogu.</p>"},{"location":"#branding","title":"Branding","text":"<p>Portal korzysta z MkDocs Material. Kolory i logo mo\u017cna dostosowa\u0107 w <code>docs/mkdocs.yml</code> oraz przez podmian\u0119 favicon i plik\u00f3w logo. Je\u015bli pode\u015blesz logo (SVG/PNG), pod\u0142\u0105cz\u0119 je i ustawi\u0119 palet\u0119 barw.</p>"},{"location":"license/","title":"License","text":"<p>Licencja</p> <ul> <li>Kod: Apache-2.0 \u2014 pe\u0142na tre\u015b\u0107 w pliku <code>LICENSE</code> w repozytorium.</li> <li>Tre\u015bci/dane: materia\u0142 zastrze\u017cony \u2014 patrz <code>NOTICE</code> oraz stron\u0119 \u201eWarunki korzystania (ToS)\u201d.</li> </ul> <p>Link do pliku: https://github.com/alphatra/taekwonhandbook-backend-/blob/master/LICENSE</p>"},{"location":"terms/","title":"Terms","text":"<p>Warunki korzystania (ToS) \u2014 tre\u015bci i dane</p> <ul> <li>Kod \u017ar\u00f3d\u0142owy backendu: licencja Apache-2.0 (patrz <code>LICENSE</code>).</li> <li>Tre\u015bci i dane (bazy danych, eksporty, media, teksty, sylabusy): materia\u0142 zastrze\u017cony. Bez pisemnej zgody nie wolno kopiowa\u0107, publikowa\u0107 ani udost\u0119pnia\u0107.</li> <li>API nie stanowi zgody na scrapowanie tre\u015bci. Wykorzystanie komercyjne danych wymaga umowy.</li> <li>Media serwowane pre-signed URL (kr\u00f3tki TTL); zakaz dalszej dystrybucji.</li> </ul>"},{"location":"api/","title":"Index","text":"<p>API (OpenAPI)</p> <pre><code>url: api/openapi.json\n</code></pre>"},{"location":"flows/media-pipeline/","title":"Media pipeline","text":""},{"location":"flows/media-pipeline/#pipeline-wideo-upload-transcode-thumbnails","title":"Pipeline wideo (upload \u2192 transcode \u2192 thumbnails)","text":"<p>Lista krok\u00f3w: 1. FE: POST /api/v1/media/upload (filename) 2. API: zwraca presigned POST (url, fields) 3. FE: upload multipart do S3/MinIO 4. FE: POST /api/v1/media/complete (key, kind) 5. API: Celery transcode_media(asset_id) \u2192 rendery + miniatury</p>"},{"location":"flows/offline-sync/","title":"Offline sync","text":""},{"location":"flows/offline-sync/#offline-sync-delta-etag","title":"Offline sync (delta + ETag)","text":"<p>Sekwencja (skr\u00f3t): - GET listy z If-None-Match \u2192 304 przy zgodnym ETag - POST progress w kolejce retry \u2192 200/201</p>"},{"location":"flows/search-fallback/","title":"Search fallback","text":""},{"location":"flows/search-fallback/#wyszukiwanie-z-fallbackiem","title":"Wyszukiwanie z fallbackiem","text":"<p>Flow (skr\u00f3t): - Meilisearch \u2192 hits \u2192 response - Brak/err \u2192 DB fallback \u2192 response</p>"},{"location":"reference/apps/","title":"Apps","text":"<p>Referencje \u2014 Aplikacje domenowe</p>"},{"location":"reference/apps/#tkh_lexicon.views.TechniqueViewSet","title":"TechniqueViewSet","text":"<p>               Bases: <code>ReadOnlyModelViewSet</code></p> <p>Public read-only listing of techniques.</p> <p>PL: Publiczny endpoint tylko do odczytu dla listy technik. Wspiera filtrowanie po <code>category</code>, minimalnym pasie (<code>min_belt</code>) oraz filtr <code>hasMedia</code>, a tak\u017ce wyszukiwanie pe\u0142notekstowe po polu <code>names</code> i <code>tags</code>.</p> <p>EN: Public read-only endpoint for techniques with filters (<code>category</code>, <code>min_belt</code>, <code>hasMedia</code>) and search over <code>names</code> and <code>tags</code>.</p> Source code in <code>tkh_lexicon/views.py</code> <pre><code>class TechniqueViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"Public read-only listing of techniques.\n\n    PL: Publiczny endpoint tylko do odczytu dla listy technik. Wspiera filtrowanie\n    po `category`, minimalnym pasie (`min_belt`) oraz filtr `hasMedia`, a tak\u017ce\n    wyszukiwanie pe\u0142notekstowe po polu `names` i `tags`.\n\n    EN: Public read-only endpoint for techniques with filters (`category`,\n    `min_belt`, `hasMedia`) and search over `names` and `tags`.\n    \"\"\"\n    queryset = Technique.objects.all()\n    serializer_class = TechniqueSerializer\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter]\n    filterset_class = TechniqueFilterSet\n    search_fields = [\"names\", \"tags\"]\n    ordering = [\"-updated_at\"]\n    ordering_fields = [\"updated_at\", \"min_belt\", \"id\"]\n</code></pre>"},{"location":"reference/apps/#tkh_patterns.views.TulViewSet","title":"TulViewSet","text":"<p>               Bases: <code>ReadOnlyModelViewSet</code></p> <p>Public read-only listing of tuls (patterns).</p> <p>PL: Endpoint publiczny (tylko odczyt) dla uk\u0142ad\u00f3w tul. Umo\u017cliwia filtrowanie po <code>belt</code> i opcjonalnie <code>hasMedia</code>, wyszukiwanie po nazwie oraz sortowanie.</p> <p>EN: Public read-only endpoint for patterns with filtering by <code>belt</code>, optional <code>hasMedia</code> flag, search by <code>name</code> and ordering.</p> Source code in <code>tkh_patterns/views.py</code> <pre><code>class TulViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"Public read-only listing of tuls (patterns).\n\n    PL: Endpoint publiczny (tylko odczyt) dla uk\u0142ad\u00f3w tul. Umo\u017cliwia filtrowanie\n    po `belt` i opcjonalnie `hasMedia`, wyszukiwanie po nazwie oraz sortowanie.\n\n    EN: Public read-only endpoint for patterns with filtering by `belt`, optional\n    `hasMedia` flag, search by `name` and ordering.\n    \"\"\"\n    queryset = Tul.objects.all()\n    serializer_class = TulSerializer\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter]\n    filterset_class = TulFilterSet\n    search_fields = [\"name\"]\n    ordering = [\"belt\", \"name\"]\n    ordering_fields = [\"belt\", \"name\", \"id\"]\n</code></pre>"},{"location":"reference/apps/#tkh_media.views.MediaAssetViewSet","title":"MediaAssetViewSet","text":"<p>               Bases: <code>ReadOnlyModelViewSet</code></p> <p>Public read-only access to processed media assets with filters/search.</p> Source code in <code>tkh_media/views.py</code> <pre><code>class MediaAssetViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"Public read-only access to processed media assets with filters/search.\"\"\"\n    queryset = MediaAsset.objects.all().order_by(\"-updated_at\")\n    serializer_class = MediaAssetSerializer\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter]\n    filterset_fields = {\n        \"kind\": [\"exact\"],\n        \"status\": [\"exact\"],\n        \"techniques\": [\"exact\"],\n        \"tuls\": [\"exact\"],\n        \"codec\": [\"exact\"],\n    }\n    search_fields = [\"file\", \"codec\"]\n\n    def get_queryset(self):\n        qs = super().get_queryset()\n        # Duration range filters\n        try:\n            dmin = self.request.query_params.get(\"duration_min\")\n            dmax = self.request.query_params.get(\"duration_max\")\n            if dmin is not None:\n                qs = qs.filter(duration__gte=float(dmin))\n            if dmax is not None:\n                qs = qs.filter(duration__lte=float(dmax))\n        except ValueError:\n            pass\n        # Resolution contains (e.g., resolution=480p)\n        res = self.request.query_params.get(\"resolution\")\n        if res:\n            try:\n                qs = qs.filter(resolutions__contains=[res])\n            except Exception:\n                # Fallback naive filter for non-JSON contains backends\n                qs = qs.filter(resolutions__icontains=res)\n        return qs\n</code></pre>"},{"location":"reference/apps/#tkh_media.views.MediaCompleteView","title":"MediaCompleteView","text":"<p>               Bases: <code>APIView</code></p> <p>Finalize upload and trigger async transcode pipeline.</p> <p>PL: Finalizuje upload (tworzy rekord <code>MediaAsset</code>) i uruchamia asynchroniczny pipeline transkodowania (Celery). Zwraca metadane zasobu.</p> Source code in <code>tkh_media/views.py</code> <pre><code>@extend_schema(request=MediaCompleteRequestSerializer, responses=MediaAssetSerializer)\nclass MediaCompleteView(views.APIView):\n    \"\"\"Finalize upload and trigger async transcode pipeline.\n\n    PL: Finalizuje upload (tworzy rekord `MediaAsset`) i uruchamia asynchroniczny\n    pipeline transkodowania (Celery). Zwraca metadane zasobu.\n    \"\"\"\n    permission_classes = [IsAuthenticated]\n    throttle_classes = [ScopedRateThrottle]\n    throttle_scope = \"media\"\n    class DummySerializer:\n        pass\n    serializer_class = DummySerializer\n\n    def post(self, request):\n        serializer = MediaAssetSerializer(data={\n            \"file\": request.data.get(\"key\"),\n            \"kind\": request.data.get(\"kind\", \"video\"),\n            \"status\": \"uploaded\",\n        })\n        serializer.is_valid(raise_exception=True)\n        asset = serializer.save()\n        # uruchom pipeline transkodowania (w DEBUG domy\u015blnie eager)\n        transcode_media.delay(asset.id)\n        asset.refresh_from_db()\n        return Response(MediaAssetSerializer(asset).data, status=status.HTTP_201_CREATED)\n</code></pre>"},{"location":"reference/apps/#tkh_media.views.MediaUploadView","title":"MediaUploadView","text":"<p>               Bases: <code>APIView</code></p> <p>Generate a minimal S3/MinIO presigned POST for direct upload.</p> <p>PL: Generuje minimalny presigned POST (MinIO/S3) do bezpo\u015bredniego uploadu z klienta. Zabezpieczone JWT + throttlingiem. Parametr wej\u015bciowy: <code>filename</code>.</p> Source code in <code>tkh_media/views.py</code> <pre><code>@extend_schema(request=PresignUploadRequestSerializer, responses=PresignUploadResponseSerializer)\nclass MediaUploadView(views.APIView):\n    \"\"\"Generate a minimal S3/MinIO presigned POST for direct upload.\n\n    PL: Generuje minimalny presigned POST (MinIO/S3) do bezpo\u015bredniego uploadu\n    z klienta. Zabezpieczone JWT + throttlingiem. Parametr wej\u015bciowy: `filename`.\n    \"\"\"\n    permission_classes = [IsAuthenticated]\n    throttle_classes = [ScopedRateThrottle]\n    throttle_scope = \"media\"\n    class DummySerializer:\n        pass\n    serializer_class = DummySerializer\n\n    def post(self, request):\n        PresignUploadRequestSerializer(data=request.data).is_valid(raise_exception=True)\n        # Minimalny presigned POST (kompatybilny z MinIO/S3, uproszczony)\n        filename = request.data.get(\"filename\")\n        if not filename:\n            return Response({\"detail\": \"filename required\"}, status=400)\n\n        bucket = settings.S3_BUCKET if hasattr(settings, \"S3_BUCKET\") else \"taekwonhandbook\"\n        key = f\"uploads/{request.user.id}/{filename}\"\n\n        endpoint = getattr(settings, \"S3_ENDPOINT_URL\", \"http://localhost:9000\")\n        access_key = getattr(settings, \"S3_ACCESS_KEY\", \"minioadmin\")\n        secret_key = getattr(settings, \"S3_SECRET_KEY\", \"minioadmin\").encode()\n\n        expires = (datetime.now(timezone.utc) + timedelta(minutes=10)).strftime(\"%Y-%m-%dT%H:%M:%SZ\")\n        policy = {\n            \"expiration\": expires,\n            \"conditions\": [\n                {\"bucket\": bucket},\n                [\"starts-with\", \"$key\", key],\n                {\"acl\": \"private\"},\n                [\"content-length-range\", 0, 104857600],  # 100MB\n            ],\n        }\n        policy_b64 = base64.b64encode(json.dumps(policy).encode()).decode()\n        signature = base64.b64encode(hmac.new(secret_key, policy_b64.encode(), hashlib.sha1).digest()).decode()\n\n        url = urljoin(endpoint + \"/\", f\"{bucket}\")\n        return Response(\n            {\n                \"url\": url,\n                \"fields\": {\n                    \"key\": key,\n                    \"acl\": \"private\",\n                    \"AWSAccessKeyId\": access_key,\n                    \"policy\": policy_b64,\n                    \"signature\": signature,\n                },\n            }\n        )\n</code></pre>"},{"location":"reference/apps/#tkh_search.views.SearchView","title":"SearchView","text":"<p>               Bases: <code>APIView</code></p> <p>Unified search across techniques and tuls with Meilisearch fallback.</p> <p>PL: Zunifikowane wyszukiwanie (techniques/tuls). Najpierw Meilisearch, a w razie braku us\u0142ugi \u2013 fallback do zapyta\u0144 DB. Throttling per-scope.</p> <p>EN: Unified search with Meilisearch first, then database fallback.</p> Source code in <code>tkh_search/views.py</code> <pre><code>@extend_schema(\n    parameters=[\n        OpenApiParameter(name=\"q\", description=\"Query string (icontains for DB fallback)\", required=False, type=str),\n        OpenApiParameter(name=\"type\", description=\"technique|tul\", required=False, type=str),\n        OpenApiParameter(name=\"limit\", description=\"Max results (default 20, max 50)\", required=False, type=int),\n    ],\n    responses=SearchResponseSerializer,\n)\nclass SearchView(APIView):\n    \"\"\"Unified search across techniques and tuls with Meilisearch fallback.\n\n    PL: Zunifikowane wyszukiwanie (techniques/tuls). Najpierw Meilisearch,\n    a w razie braku us\u0142ugi \u2013 fallback do zapyta\u0144 DB. Throttling per-scope.\n\n    EN: Unified search with Meilisearch first, then database fallback.\n    \"\"\"\n    permission_classes = [AllowAny]\n    throttle_classes = [ScopedRateThrottle]\n    throttle_scope = \"search\"\n    # For OpenAPI schema hints\n    class DummySerializer:\n        pass\n    serializer_class = DummySerializer\n\n    def get(self, request):\n        query = request.GET.get(\"q\", \"\").strip()\n        kind = request.GET.get(\"type\", \"technique\")\n        results = []\n        try:\n            limit = max(1, min(50, int(request.GET.get(\"limit\", 20))))\n        except Exception:\n            limit = 20\n\n        if meilisearch and getattr(settings, \"MEILISEARCH_URL\", None):\n            try:\n                client = meilisearch.Client(settings.MEILISEARCH_URL, settings.MEILISEARCH_API_KEY or None)\n                index_name = \"techniques\" if kind == \"technique\" else \"tuls\"\n                idx = client.index(index_name)\n                res = idx.search(query or \"\", {\"limit\": limit})\n                results = res.get(\"hits\", [])\n            except Exception:\n                results = []\n\n        if not results:  # fallback DB\n            if kind == \"technique\":\n                qs = Technique.objects.all()\n                if query:\n                    qs = qs.filter(category__icontains=query)\n                results = [\n                    {\"id\": t.id, \"names\": t.names, \"category\": t.category, \"min_belt\": t.min_belt}\n                    for t in qs[:limit]\n                ]\n            else:\n                qs = Tul.objects.all()\n                if query:\n                    qs = qs.filter(name__icontains=query)\n                results = [\n                    {\"id\": x.id, \"name\": x.name, \"belt\": x.belt}\n                    for x in qs[:limit]\n                ]\n\n        return Response({\"results\": results})\n</code></pre>"},{"location":"reference/apps/#tkh_quizzes.views.QuizAnswerView","title":"QuizAnswerView","text":"<p>               Bases: <code>APIView</code></p> <p>Answer a quiz question and advance the session.</p> <p>PL: Przetwarza odpowied\u017a u\u017cytkownika na bie\u017c\u0105ce pytanie, aktualizuje licznik poprawnych odpowiedzi i przesuwa wska\u017anik. Zwraca stan sesji oraz dane pytania (dla klienta).</p> Source code in <code>tkh_quizzes/views.py</code> <pre><code>@extend_schema(request=QuizAnswerRequestSerializer, responses=QuizAnswerResponseSerializer)\nclass QuizAnswerView(views.APIView):\n    \"\"\"Answer a quiz question and advance the session.\n\n    PL: Przetwarza odpowied\u017a u\u017cytkownika na bie\u017c\u0105ce pytanie, aktualizuje\n    licznik poprawnych odpowiedzi i przesuwa wska\u017anik. Zwraca stan sesji\n    oraz dane pytania (dla klienta).\n    \"\"\"\n    permission_classes = [IsAuthenticated]\n    throttle_classes = [ScopedRateThrottle]\n    throttle_scope = \"quizzes\"\n    class DummySerializer:\n        pass\n    serializer_class = DummySerializer\n\n    def post(self, request, session_id: int):\n        try:\n            session = QuizSession.objects.get(id=session_id, user=request.user)\n        except QuizSession.DoesNotExist:\n            return Response({\"detail\": \"not found\"}, status=404)\n        if session.finished:\n            return Response(QuizSessionSerializer(session).data)\n        if session.current_index &gt;= len(session.questions):\n            session.finished = True\n            session.save(update_fields=[\"finished\"])\n            return Response(QuizSessionSerializer(session).data)\n\n        qid = session.questions[session.current_index]\n        try:\n            q = QuizQuestion.objects.get(id=qid)\n        except QuizQuestion.DoesNotExist:\n            # skip broken question\n            session.current_index += 1\n            session.save(update_fields=[\"current_index\"])\n            return Response(QuizSessionSerializer(session).data)\n\n        answer = int(request.data.get(\"answer\", -1))\n        if answer == q.correct:\n            session.correct_count += 1\n        session.current_index += 1\n        if session.current_index &gt;= len(session.questions):\n            session.finished = True\n        session.save(update_fields=[\"correct_count\", \"current_index\", \"finished\"])\n        return Response({\n            \"session\": QuizSessionSerializer(session).data,\n            \"question\": QuizQuestionSerializer(q).data,\n            \"isCorrect\": answer == q.correct,\n        }, status=status.HTTP_200_OK)\n</code></pre>"},{"location":"reference/apps/#tkh_quizzes.views.QuizStartView","title":"QuizStartView","text":"<p>               Bases: <code>APIView</code></p> <p>Start a quiz session for the user.</p> <p>PL: Tworzy now\u0105 sesj\u0119 quizu (tryb, opcjonalny pas), losuje pytania i zwraca stan sesji. Throttling per-scope, auth wymagane.</p> Source code in <code>tkh_quizzes/views.py</code> <pre><code>@extend_schema(request=QuizStartRequestSerializer, responses=QuizSessionSerializer)\nclass QuizStartView(views.APIView):\n    \"\"\"Start a quiz session for the user.\n\n    PL: Tworzy now\u0105 sesj\u0119 quizu (tryb, opcjonalny pas), losuje pytania i\n    zwraca stan sesji. Throttling per-scope, auth wymagane.\n    \"\"\"\n    permission_classes = [IsAuthenticated]\n    throttle_classes = [ScopedRateThrottle]\n    throttle_scope = \"quizzes\"\n    class DummySerializer:\n        pass\n    serializer_class = DummySerializer\n\n    def get(self, request):\n        mode = request.GET.get(\"mode\", \"terms\")\n        belt = request.GET.get(\"belt\")\n        qs = QuizQuestion.objects.filter(type=mode)\n        if belt:\n            qs = qs.filter(belt=belt)\n        ids = list(qs.values_list(\"id\", flat=True)[:10])\n        random.shuffle(ids)\n        session = QuizSession.objects.create(user=request.user, mode=mode, belt=belt or None, questions=ids)\n        return Response(QuizSessionSerializer(session).data)\n</code></pre>"},{"location":"reference/apps/#tkh_exams.views.ExamSyllabusView","title":"ExamSyllabusView","text":"<p>               Bases: <code>APIView</code></p> <p>Return published exam syllabus for a given belt.</p> <p>PL: Zwraca opublikowany sylabus egzaminacyjny dla podanego pasa (<code>belt</code>).</p> Source code in <code>tkh_exams/views.py</code> <pre><code>@extend_schema(responses=ExamSyllabusSerializer)\nclass ExamSyllabusView(views.APIView):\n    \"\"\"Return published exam syllabus for a given belt.\n\n    PL: Zwraca opublikowany sylabus egzaminacyjny dla podanego pasa (`belt`).\n    \"\"\"\n    permission_classes = [AllowAny]\n    class DummySerializer:\n        pass\n    serializer_class = DummySerializer\n\n    def get(self, request, belt: int):\n        try:\n            s = ExamSyllabus.objects.get(belt=belt, is_draft=False)\n        except ExamSyllabus.DoesNotExist:\n            return Response({\"detail\": \"not found\"}, status=404)\n        return Response(ExamSyllabusSerializer(s).data)\n</code></pre>"},{"location":"reference/core/","title":"Core","text":"<p>Referencje \u2014 Core</p> <p>Django settings for core project.</p> <p>Generated by 'django-admin startproject' using Django 5.2.5.</p> <p>For more information on this file, see https://docs.djangoproject.com/en/5.2/topics/settings/</p> <p>For the full list of settings and their values, see https://docs.djangoproject.com/en/5.2/ref/settings/</p> <p>URL configuration for core project.</p> <p>The <code>urlpatterns</code> list routes URLs to views. For more information please see:     https://docs.djangoproject.com/en/5.2/topics/http/urls/ Examples: Function views     1. Add an import:  from my_app import views     2. Add a URL to urlpatterns:  path('', views.home, name='home') Class-based views     1. Add an import:  from other_app.views import Home     2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home') Including another URLconf     1. Import the include() function: from django.urls import include, path     2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))</p> <p>ASGI config for core project.</p> <p>It exposes the ASGI callable as a module-level variable named <code>application</code>.</p> <p>For more information on this file, see https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/</p> <p>Core auxiliary views and utilities for documentation.</p> <p>This module exposes lightweight, read-only views that can be referenced by the documentation or used for simple health checks and examples.</p> <p>Docstrings are intentionally bilingual (PL/EN) to feed mkdocstrings.</p>"},{"location":"reference/core/#core.middleware.DisallowScrapingMiddleware","title":"DisallowScrapingMiddleware","text":"<p>Add anti-scraping headers and basic anti-embedding.</p> <p>Nie zast\u0119puje ochrony prawnej (NOTICE/ToS), ale utrudnia automatyczne kopiowanie i komunikuje polityk\u0119 klientom (np. botom, wyszukiwarkom).</p> Source code in <code>core/middleware.py</code> <pre><code>class DisallowScrapingMiddleware:\n    \"\"\"Add anti-scraping headers and basic anti-embedding.\n\n    Nie zast\u0119puje ochrony prawnej (NOTICE/ToS), ale utrudnia automatyczne kopiowanie\n    i komunikuje polityk\u0119 klientom (np. botom, wyszukiwarkom).\n    \"\"\"\n\n    def __init__(self, get_response: Callable[[HttpRequest], HttpResponse]) -&gt; None:\n        self.get_response = get_response\n\n    def __call__(self, request: HttpRequest) -&gt; HttpResponse:\n        response = self.get_response(request)\n        response.headers.setdefault(\"X-Content-Type-Options\", \"nosniff\")\n        response.headers.setdefault(\"X-Frame-Options\", \"DENY\")\n        response.headers.setdefault(\"X-Robots-Tag\", \"noindex, nofollow, noarchive\")\n        response.headers.setdefault(\"Cache-Control\", \"no-store\")\n        return response\n</code></pre>"},{"location":"reference/core/#core.views.doc_ping","title":"doc_ping","text":"<pre><code>doc_ping(request)\n</code></pre> <p>Ping endpoint returning a tiny JSON payload.</p> <p>PL: Prosty endpoint zwracaj\u0105cy minimaln\u0105 odpowied\u017a JSON \u2013 wykorzystywany w przyk\u0142adach dokumentacji i testach dymnych.</p>"},{"location":"reference/core/#core.views.doc_ping--returns","title":"Returns","text":"<p>JsonResponse     Payload postaci <code>{\"ok\": true}</code>.</p> Source code in <code>core/views.py</code> <pre><code>def doc_ping(request: HttpRequest) -&gt; JsonResponse:\n    \"\"\"Ping endpoint returning a tiny JSON payload.\n\n    PL: Prosty endpoint zwracaj\u0105cy minimaln\u0105 odpowied\u017a JSON \u2013 wykorzystywany\n    w przyk\u0142adach dokumentacji i testach dymnych.\n\n    Returns\n    -------\n    JsonResponse\n        Payload postaci `{\"ok\": true}`.\n    \"\"\"\n\n    return JsonResponse({\"ok\": True})\n</code></pre>"},{"location":"reference/core/#core.views.health","title":"health","text":"<pre><code>health(_request)\n</code></pre> <p>Healthcheck for critical dependencies (DB implicit via Django, Redis/Meilisearch optional).</p> <p>Returns JSON with status: ok/degraded and components.</p> Source code in <code>core/views.py</code> <pre><code>def health(_request: HttpRequest) -&gt; JsonResponse:\n    \"\"\"Healthcheck for critical dependencies (DB implicit via Django, Redis/Meilisearch optional).\n\n    Returns JSON with status: ok/degraded and components.\n    \"\"\"\n    status = \"ok\"\n    checks = {\n        \"db\": \"ok\",  # if Django loaded models, basic DB conn is typically fine here\n    }\n    # Redis URL presence implies channels/celery usage\n    redis_url = getattr(settings, \"CELERY_BROKER_URL\", \"\") or getattr(settings, \"REDIS_URL\", \"\")\n    if redis_url:\n        try:\n            host = redis_url.split(\"@\")[-1].split(\"/\")[0].split(\":\")[0]\n            socket.gethostbyname(host)\n            checks[\"redis\"] = \"ok\"\n        except Exception as e:  # pragma: no cover\n            checks[\"redis\"] = f\"error: {e}\"\n            status = \"degraded\"\n    # Meilisearch\n    if getattr(settings, \"MEILISEARCH_URL\", None) and requests:\n        try:\n            r = requests.get(settings.MEILISEARCH_URL.rstrip(\"/\") + \"/health\", timeout=1.5)\n            checks[\"meilisearch\"] = \"ok\" if r.ok else f\"error: {r.status_code}\"\n            if not r.ok:\n                status = \"degraded\"\n        except Exception as e:  # pragma: no cover\n            checks[\"meilisearch\"] = f\"error: {e}\"\n            status = \"degraded\"\n    return JsonResponse({\"status\": status, **checks})\n</code></pre>"},{"location":"reference/core/#core.views.robots_txt","title":"robots_txt","text":"<pre><code>robots_txt(_request)\n</code></pre> <p>Disallow indexing/scraping via robots.txt.</p> <p>PL: Proaktywnie blokuje indeksowanie (noindex/nofollow). To soft measure, nie stanowi zgody na scrapowanie.</p> Source code in <code>core/views.py</code> <pre><code>def robots_txt(_request: HttpRequest) -&gt; JsonResponse:\n    \"\"\"Disallow indexing/scraping via robots.txt.\n\n    PL: Proaktywnie blokuje indeksowanie (noindex/nofollow). To soft measure,\n    nie stanowi zgody na scrapowanie.\n    \"\"\"\n\n    return JsonResponse(\"User-agent: *\\nDisallow: /\\n\", status=200, content_type=\"text/plain\", safe=False)\n</code></pre>"},{"location":"reference/","title":"Index","text":""},{"location":"reference/#referencje-pythona","title":"Referencje Pythona","text":"<p>Sekcja wype\u0142niana automatycznie przez mkdocstrings.</p>"},{"location":"en/getting-started/#quick-start-dev","title":"Quick start (DEV)","text":"<ol> <li><code>rye pin 3.12 &amp;&amp; rye sync</code></li> <li><code>docker compose up -d postgres redis meilisearch minio</code></li> <li><code>rye run python backend/manage.py migrate</code></li> <li><code>rye run python backend/manage.py runserver</code></li> </ol> <p>API: <code>/api/docs/</code> (Swagger/Redoc)</p>"},{"location":"en/getting-started/#upload-a-video-curl-example","title":"Upload a video (cURL example)","text":"<p>1) Get presigned POST:</p> <pre><code>curl -X POST \"http://localhost:8000/api/v1/media/upload\" \\\n  -H \"Authorization: Bearer &lt;JWT&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"filename\":\"demo.mp4\"}'\n</code></pre> <p>2) Upload file directly to S3/MinIO:</p> <pre><code>curl -X POST \"$URL_FROM_STEP1\" \\\n  -F key=\"$KEY\" \\\n  -F acl=private \\\n  -F AWSAccessKeyId=\"$ACCESS_KEY\" \\\n  -F policy=\"$POLICY\" \\\n  -F signature=\"$SIGNATURE\" \\\n  -F file=@demo.mp4\n</code></pre> <p>3) Finalize:</p> <pre><code>curl -X POST \"http://localhost:8000/api/v1/media/complete\" \\\n  -H \"Authorization: Bearer &lt;JWT&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"key\":\"uploads/&lt;uid&gt;/demo.mp4\",\"kind\":\"video\"}'\n</code></pre>"},{"location":"en/howto-billing/","title":"Billing and Clubs (EN)","text":"<p>This guide shows how to: - fetch plans (<code>GET /api/v1/billing/plans</code>) - obtain an entitlements token (<code>GET /api/v1/billing/entitlements/token</code>) - check ad decision (<code>GET /api/v1/ads/should-show</code>) - create a club and invite/remove members, delete a club</p>"},{"location":"en/howto-billing/#jwt","title":"JWT","text":"<p>Obtain a token:</p> <pre><code>curl -X POST http://localhost:8000/api/auth/token/ \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"username\":\"member\",\"password\":\"Member123!\"}'\n</code></pre>"},{"location":"en/howto-billing/#plans","title":"Plans","text":"<pre><code>curl http://localhost:8000/api/v1/billing/plans\n</code></pre>"},{"location":"en/howto-billing/#entitlements-token","title":"Entitlements token","text":"<p><pre><code>curl -H \"Authorization: Bearer $TOKEN\" \\\n  http://localhost:8000/api/v1/billing/entitlements/token\n</code></pre> Response contains <code>token</code> (signed) and <code>ttlSeconds</code> (default 300).</p>"},{"location":"en/howto-billing/#ads-decision","title":"Ads decision","text":"<p><pre><code>curl -H \"Authorization: Bearer $TOKEN\" \\\n  http://localhost:8000/api/v1/ads/should-show\n</code></pre> If user has <code>no_ads</code> entitlement, response is <code>{ \"shouldShow\": false, \"reason\": \"no_ads\" }</code>.</p>"},{"location":"en/howto-billing/#clubs","title":"Clubs","text":"<ul> <li>Create a club (owner): <pre><code>curl -X POST -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -d '{\"name\":\"Do jang A\",\"plan\":\"club\",\"seats_total\":5}' \\\n  http://localhost:8000/api/v1/billing/clubs\n</code></pre></li> <li>Invite a member (owner): <pre><code>curl -X POST -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $TOKEN\" \\\n  -d '{\"user_id\":3}' \\\n  http://localhost:8000/api/v1/billing/clubs/1/invite\n</code></pre></li> <li>Remove a member (owner): <pre><code>curl -X DELETE -H \"Authorization: Bearer $TOKEN\" \\\n  http://localhost:8000/api/v1/billing/clubs/1/members/3\n</code></pre></li> <li>Delete an empty club (owner only): <pre><code>curl -X DELETE -H \"Authorization: Bearer $TOKEN\" \\\n  http://localhost:8000/api/v1/billing/clubs/1\n</code></pre></li> </ul>"},{"location":"en/howto-clubs/","title":"Clubs API (EN)","text":"<p>Owner endpoints: - GET /api/v1/billing/clubs \u2014 list owner's clubs - POST /api/v1/billing/clubs \u2014 create club (name, plan, seats_total) - POST /api/v1/billing/clubs/{id}/invite \u2014 invite member (user_id) - DELETE /api/v1/billing/clubs/{id}/members/{user_id} \u2014 remove member (not owner) - DELETE /api/v1/billing/clubs/{id} \u2014 delete club (when empty)</p> <p>Member endpoints: - POST /api/v1/billing/clubs/{id}/leave \u2014 leave club (not owner)</p> <p>Requirements: - JWT header Authorization: Bearer  - Seat limit enforced by plan's seats_max <p>See also: howto-billing.en.md and Swagger UI under API.</p>"},{"location":"en/howto-clubs/#role-permissions","title":"Role permissions","text":"Operation Endpoint owner coach member List clubs GET /api/v1/billing/clubs \u2713 \u2713 \u2717 Create club POST /api/v1/billing/clubs \u2713 \u2717 \u2717 List members GET /api/v1/billing/clubs/{id}/members \u2713 \u2713 \u2717 Invite member POST /api/v1/billing/clubs/{id}/invite \u2713 \u2713 \u2717 Remove member DELETE /api/v1/billing/clubs/{id}/members/{user_id} \u2713 \u2713 \u2717 Set role POST /api/v1/billing/clubs/{id}/members/{user_id}/role \u2713 \u2717 \u2717 Delete club (empty) DELETE /api/v1/billing/clubs/{id} \u2713 \u2717 \u2717 Leave club POST /api/v1/billing/clubs/{id}/leave \u2717 \u2717 \u2713"},{"location":"en/howto-etag/","title":"Howto etag","text":"<p>How\u2011to: ETag (If\u2011None\u2011Match)</p> <p>Conditional GET for techniques list:</p> <pre><code># 1) First fetch\ncurl -i \"http://localhost:8000/api/v1/techniques/\" \\\n  -H \"Authorization: Bearer $ACCESS\"\n\n# Read ETag header from response, e.g. ETag: \"\\\"abc123\\\"\"\nETAG=\\\"abc123\\\"\n\n# 2) Conditional fetch (no changes \u2192 304)\ncurl -i \"http://localhost:8000/api/v1/techniques/\" \\\n  -H \"If-None-Match: $ETAG\" \\\n  -H \"Authorization: Bearer $ACCESS\"\n</code></pre> <p>In an offline-first client: persist ETags per resource and use <code>If-None-Match</code>; on 304 keep cached data.</p>"},{"location":"en/howto-filters/","title":"Howto filters","text":"<p>How\u2011to: Pagination, ordering, and filtering</p>"},{"location":"en/howto-filters/#pagination-drf-pagenumberpagination","title":"Pagination (DRF PageNumberPagination)","text":"<pre><code>curl \"http://localhost:8000/api/v1/techniques/?page=2\" \\\n  -H \"Authorization: Bearer $ACCESS\"\n</code></pre>"},{"location":"en/howto-filters/#ordering-orderingfilter","title":"Ordering (OrderingFilter)","text":"<pre><code># descending by updated_at then ascending by id\ncurl \"http://localhost:8000/api/v1/techniques/?ordering=-updated_at,id\" \\\n  -H \"Authorization: Bearer $ACCESS\"\n</code></pre>"},{"location":"en/howto-filters/#filtering-techniques","title":"Filtering \u2014 Techniques","text":"<pre><code># category\ncurl \"http://localhost:8000/api/v1/techniques/?category=hand\" -H \"Authorization: Bearer $ACCESS\"\n\n# minimum belt\ncurl \"http://localhost:8000/api/v1/techniques/?min_belt=5\" -H \"Authorization: Bearer $ACCESS\"\n\n# has media\ncurl \"http://localhost:8000/api/v1/techniques/?hasMedia=true\" -H \"Authorization: Bearer $ACCESS\"\n</code></pre>"},{"location":"en/howto-filters/#filtering-tuls","title":"Filtering \u2014 Tuls","text":"<pre><code>curl \"http://localhost:8000/api/v1/tuls/?belt=6\" -H \"Authorization: Bearer $ACCESS\"\n</code></pre>"},{"location":"en/howto-jwt/","title":"Howto jwt","text":"<p>How\u2011to: JWT (login and refresh)</p> <p>1) Obtain token</p> <pre><code>curl -X POST \"http://localhost:8000/api/auth/token/\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\":\"admin\",\"password\":\"&lt;password&gt;\"}'\n# =&gt; { \"access\": \"...\", \"refresh\": \"...\" }\n</code></pre> <p>2) Use token</p> <pre><code>ACCESS=&lt;access&gt;\ncurl -H \"Authorization: Bearer $ACCESS\" \\\n  \"http://localhost:8000/api/v1/techniques/?page=1\"\n</code></pre> <p>3) Refresh token</p> <pre><code>REFRESH=&lt;refresh&gt;\ncurl -X POST \"http://localhost:8000/api/auth/token/refresh/\" \\\n  -H \"Content-Type: application/json\" \\\n  -d \"{\\\"refresh\\\":\\\"$REFRESH\\\"}\"\n# =&gt; { \"access\": \"...\" }\n</code></pre> <p>Client: store <code>access</code> short\u2011lived, <code>refresh</code> in secure storage; on 401 try refresh then retry request.</p>"},{"location":"en/howto-media/","title":"Media: upload \u2192 transcode \u2192 listing (EN)","text":""},{"location":"en/howto-media/#1-presigned-upload-s3minio","title":"1) Presigned upload (S3/MinIO)","text":"<p><pre><code>curl -X POST http://localhost:8000/api/v1/media/upload   -H \"Authorization: Bearer $TOKEN\"   -H 'Content-Type: application/json'   -d '{\"filename\":\"test.mp4\"}'\n</code></pre> The response contains <code>url</code> and <code>fields</code> for direct POST to the bucket.</p>"},{"location":"en/howto-media/#2-complete-upload-and-start-transcode","title":"2) Complete upload and start transcode","text":"<p>After successful POST to the bucket, call: <pre><code>curl -X POST http://localhost:8000/api/v1/media/complete   -H \"Authorization: Bearer $TOKEN\"   -d \"key=uploads/1/test.mp4\" -d \"kind=video\"\n</code></pre> In DEV Celery runs eager \u2013 the asset gets <code>status=ready</code>, <code>codec=h264</code>, <code>duration\u224812.34</code>, <code>resolutions=[360p,480p]</code>, thumbnails.</p>"},{"location":"en/howto-media/#3-list-and-filters","title":"3) List and filters","text":"<p>```bash</p>"},{"location":"en/howto-media/#all-ready-videos-with-h264-codec","title":"all ready videos with h264 codec","text":"<p>curl \"http://localhost:8000/api/v1/media/assets?status=ready&amp;kind=video&amp;codec=h264\"</p>"},{"location":"en/howto-media/#duration-range","title":"duration range","text":"<p>curl \"http://localhost:8000/api/v1/media/assets?duration_min=1&amp;duration_max=30\"</p>"},{"location":"en/howto-media/#by-resolution-json-contains","title":"by resolution (JSON contains)","text":"<p>curl \"http://localhost:8000/api/v1/media/assets?resolution=480p\"</p>"},{"location":"en/howto-search/","title":"Search &amp; Reindex (EN)","text":""},{"location":"en/howto-search/#endpoint-apiv1search","title":"Endpoint <code>/api/v1/search</code>","text":"<ul> <li>Params:</li> <li>q: query string (optional)</li> <li>type: technique | tul (default technique)</li> <li>limit: 1\u201350 (default 20)</li> <li>Behavior: Meilisearch first, then DB fallback.</li> </ul> <p>Example: <pre><code>curl \"http://localhost:8000/api/v1/search?q=Hwa&amp;type=tul&amp;limit=5\"\n</code></pre></p>"},{"location":"en/howto-search/#meilisearch-reindex","title":"Meilisearch Reindex","text":"<ul> <li>Command: <pre><code>rye run python backend/manage.py reindex_search --types techniques,tuls --batch-size 500 --drop\n</code></pre></li> <li>Options:</li> <li>--types: techniques,tuls (comma-separated)</li> <li>--batch-size: batch size (default 500)</li> <li>--drop: drop/recreate indices before ingest</li> <li>--dry-run: count only, do not write to Meilisearch</li> </ul> <p>Requirements: - Env vars: MEILISEARCH_URL, optional MEILISEARCH_API_KEY</p>"},{"location":"en/howto-upload/","title":"Howto upload","text":"<p>How\u2011to: Upload video (presigned POST)</p> <p>1) Get presigned POST</p> <pre><code>curl -X POST \"http://localhost:8000/api/v1/media/upload\" \\\n  -H \"Authorization: Bearer $ACCESS\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"filename\":\"demo.mp4\"}'\n# =&gt; { url, fields{ key, acl, AWSAccessKeyId, policy, signature } }\n</code></pre> <p>2) Upload to S3/MinIO (multipart)</p> <pre><code>curl -X POST \"$URL\" \\\n  -F key=\"$KEY\" -F acl=private -F AWSAccessKeyId=\"$AK\" \\\n  -F policy=\"$POLICY\" -F signature=\"$SIG\" \\\n  -F file=@demo.mp4\n</code></pre> <p>3) Finalize</p> <pre><code>curl -X POST \"http://localhost:8000/api/v1/media/complete\" \\\n  -H \"Authorization: Bearer $ACCESS\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"key\":\"uploads/&lt;uid&gt;/demo.mp4\",\"kind\":\"video\"}'\n</code></pre>"},{"location":"en/","title":"Index","text":"<p>Taekwon\u2011Do Handbook \u2014 Backend Docs</p> <ul> <li>API: interactive OpenAPI (Swagger/Redoc) in the menu.</li> <li>Reference: auto-generated from docstrings (mkdocstrings).</li> <li>Diagrams: Mermaid (flows, sequences, architecture).</li> </ul> <p>Switch language (PL/EN) in the top right.</p>"},{"location":"en/#branding","title":"Branding","text":"<p>This portal uses MkDocs Material. Primary color and logo can be customized in <code>docs/mkdocs.yml</code> and <code>website assets</code> (favicon, logos). If you share a logo (SVG/PNG), I will plug it in and set a custom color palette.</p>"},{"location":"en/license/","title":"License","text":"<p>License</p> <ul> <li>Code: Apache-2.0 \u2014 full text in <code>LICENSE</code> at repository root.</li> <li>Content/Data: proprietary \u2014 see <code>NOTICE</code> and the \u201cTerms of Service (ToS)\u201d page.</li> </ul> <p>Link to file: https://github.com/alphatra/taekwonhandbook-backend-/blob/master/LICENSE</p>"},{"location":"en/terms/","title":"Terms","text":"<p>Terms of Service (ToS) \u2014 content and data</p> <ul> <li>Backend source code: Apache-2.0 (see <code>LICENSE</code>).</li> <li>Content and data (databases, exports, media, texts, syllabuses): proprietary material. Copying, publishing, or sharing without written permission is prohibited.</li> <li>API access is not consent for scraping. Commercial use of data requires an agreement.</li> <li>Media served via short-lived pre-signed URLs; further redistribution is forbidden.</li> </ul>"},{"location":"en/flows/media-pipeline/#video-pipeline-upload-transcode-thumbnails","title":"Video pipeline (upload \u2192 transcode \u2192 thumbnails)","text":"<p>Steps: 1. FE: POST /api/v1/media/upload (filename) 2. API: returns presigned POST (url, fields) 3. FE: upload multipart to S3/MinIO 4. FE: POST /api/v1/media/complete (key, kind) 5. API: Celery transcode_media(asset_id) \u2192 renditions + thumbnails</p>"},{"location":"en/flows/offline-sync/#offline-sync-delta-etag","title":"Offline sync (delta + ETag)","text":"<p>Sequence (short): - GET list with If-None-Match \u2192 304 on ETag match - POST progress with retry queue \u2192 200/201</p>"},{"location":"en/flows/search-fallback/#search-with-fallback","title":"Search with fallback","text":"<p>Flow (short): - Meilisearch \u2192 hits \u2192 response - No/Error \u2192 DB fallback \u2192 response</p>"}]}